{{ 'section-bundle-deals.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .bundle-deals-{{ section.id }} .bundle-deals__media {
    grid-template-columns: repeat({{ section.blocks.size }}, 1fr);
  }
  .color-scheme-{{ section.id }}.color-custom {
    --color-background: {{ section.settings.custom_colors_background.red }}, {{ section.settings.custom_colors_background.green }}, {{ section.settings.custom_colors_background.blue }};
    --gradient-background: {% if section.settings.custom_gradient_background != blank %}{{ section.settings.custom_gradient_background }}{% else %}{{ section.settings.custom_colors_background }}{% endif %};
    --color-foreground: {{ section.settings.custom_colors_text.red }}, {{ section.settings.custom_colors_text.green }}, {{ section.settings.custom_colors_text.blue }};
    --accent-color: {{ section.settings.custom_colors_accent.red }}, {{ section.settings.custom_colors_accent.green }}, {{ section.settings.custom_colors_accent.blue }};
    --color-button: {{ section.settings.custom_colors_solid_button_background.red }}, {{ section.settings.custom_colors_solid_button_background.green }}, {{ section.settings.custom_colors_solid_button_background.blue }};
    --color-button-text: {{ section.settings.custom_colors_solid_button_text.red }}, {{ section.settings.custom_colors_solid_button_text.green }}, {{ section.settings.custom_colors_solid_button_text.blue }};
  }
{%- endstyle -%}

<div class="color-scheme-{{ section.id }} color-{{ section.settings.color_scheme }} gradient">
  <div class="page-width section-{{ section.id }}-padding">
    <div>
      {%- unless section.settings.title == blank -%}
        <div class="title-wrapper--no-top-margin{% if section.settings.text != blank %} main-title-with-text{% endif %}">
          <h2 class="title {{ section.settings.heading_size }}">
            {{ section.settings.title | escape }}
          </h2>
        </div>
      {%- endunless -%}
      {% if section.settings.text != blank %}
        <div class="text-under-title">
          {{ section.settings.text }}
        </div>
      {% endif %}
    </div>
    
    {% assign total_percentage_left_multiplier = 100.0 | minus: section.settings.percentage_discount | divided_by: 100.0 %}
    {% assign total_fixed_discount = section.settings.fixed_amount_discount | times: 100.0 %}
    <bundle-deals
      id="bundle-deals-{{ section.id }}"
      class="bundle-deals bundle-deals-{{ section.id }} bundle-deals-{{ section.settings.layout }}"
      data-section="{{ section.id }}"
      data-percentage-left="{{ total_percentage_left_multiplier }}"
      data-fixed-discount="{{ total_fixed_discount }}"
      data-currency-symbol="{{ cart.currency.symbol }}"
      data-update-prices="{{ section.settings.enable_price_changes }}"
    >
      {% assign product_form_id = 'bundle-deals-' | append: section.id %}

      <div class="bundle-deals__media">
        {% for block in section.blocks %}
          {% assign product = block.settings.product %}

          <div class="bundle-deals__media-item">
            {% if product != blank and product.featured_image != blank %}
              <a
                href="{{ product.url }}"
                class="bundle-deals__media-item-container"
              >
                <img
                  src="{{ product.featured_image | image_url: width: 800 }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  loading="lazy"
                  width="auto"
                  height="auto"
                  class="bundle-deals__media-item-img"
                >
              </a>
            {% else %}
              {{ 'image' | placeholder_svg_tag: 'placeholder-svg placeholder' }}
            {% endif %}
          </div>
        {% endfor %}
      </div>
      <div class="bundle-deals__center">
        {% liquid 
          assign items_count = 0
          assign total_compare_price = 0
          assign total_price = 0
        %}
        {% for block in section.blocks %}
          {% assign product = block.settings.product %}

          {% if product != blank %}
            {% liquid
              assign items_count = items_count | plus: 1
              assign percentage_left_multiplier = 100.0 | minus: block.settings.percentage_discount | divided_by: 100.0
              assign fixed_discount = block.settings.fixed_amount_discount | times: 100.0
              assign price = product.selected_or_first_available_variant.price | times: percentage_left_multiplier | minus: fixed_discount
              if product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price
                assign compare_price = product.selected_or_first_available_variant.compare_at_price
              else 
                assign compare_price = product.selected_or_first_available_variant.price
              endif
              assign total_price = total_price | plus: price
              assign total_compare_price = total_compare_price | plus: compare_price
            %}
            
            <div class="bundle-deals__product" data-bundle-deal-id="{{ product.id }}">
              <div class="bundle-deals__checkbox-container">
                <input
                  type="checkbox"
                  class="bundle-deals__checkbox"
                  id="checkbox-{{ section.id }}-{{ forloop.index0 }}"
                  data-id="{{ product.selected_or_first_available_variant.id }}"
                  data-bundle-deal-id="{{ product.id }}"
                  data-price="{{ price }}"
                  data-compare-price="{{ compare_price }}"
                  data-index="{{ forloop.index0 }}"
                  data-id-index="id_{{ forloop.index0 }}"
                  data-checked="true"
                  checked
                >
                <label for="checkbox-{{ section.id }}-{{ forloop.index0 }}" class="bundle-deals__checkbox-label{% if block.settings.required %} pointer-events--none{% endif %}">
                  <svg
                    class="checkmark-checked"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 448 512"
                    fill="currentColor"
                    width="50"
                    height="50"
                  >
                    <path d="M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM337 209L209 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L303 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z"/>
                  </svg>
                  <svg
                    class="checkmark-unchecked"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 448 512"
                    fill="currentColor"
                    width="50"
                    height="50"
                  >
                    <path d="M384 80c8.8 0 16 7.2 16 16V416c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V96c0-8.8 7.2-16 16-16H384zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z"/>
                  </svg>
                  <p class="bundle-deals__title">
                    {{ product.title }}
                  </p>
                </label>
              </div>
              <div class="bundle-deals__info">
                {% if product.has_only_default_variant == false %}
                  <div class="bundle-deals__variant-select-container select select--small">
                    <select
                      class="bundle-deals__variant-select select__select variant-dropdown"
                      name="id"
                      aria-label="Select variant"
                      data-index="{{ forloop.index0 }}"
                      data-id-index="id_{{ forloop.index0 }}"
                    >
                      {% for variant in product.variants %}
                        <option
                          value="{{ variant.id }}"
                          data-price="{{ variant.price | times: percentage_left_multiplier | minus: fixed_discount }}"
                          data-compare-price="{% if variant.compare_at_price > variant.price %}{{ variant.compare_at_price }}{% else %}{{ variant.price }}{% endif %}"
                          {% if variant.image %}
                            {% assign variant_image = variant.image | image_url %}
                            data-image="{{ variant_image }}"
                          {% endif %}
                          {% if product.selected_or_first_available_variant.id == variant.id %}
                            selected
                          {% endif %}
                          {% unless variant.available %}
                            disabled
                          {% endunless %}
                        >
                          {{ variant.title }}
                        </option>
                      {% endfor %}
                    </select>
                  </div>
                  <script id="prices-{{ section.id }}-{{ forloop.index0 }}" type="application/json">
                    {
                      {% for variant in product.variants %}
                        "{{ variant.id }}": "{{ variant.price | money_without_currency }}"{% if forloop.index < product.variants.size %},{% endif %}
                      {% endfor %}
                    }
                  </script>
                {% endif %}
                <div class="bundle-deals__prices">
                  <span class="bundle-deals__price">{{ price | money }}</span>
                  <span class="bundle-deals__compare-price">{% if compare_price > price %}{{ compare_price | money }}{% endif %}</span>
                </div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
      <div class="bundle-deals__empty"></div>
      <div class="bundle-deals__button">
        {% if items_count == section.blocks.size %}
          <p class="bundle-deals__total-price-container">
            <span>{{ section.settings.total_price_label }}</span>
            <span>
              {% assign total_price = total_price | times: total_percentage_left_multiplier | minus: total_fixed_discount %}
              <span class="bundle-deals__total-price regular-price">{{ total_price | money }}</span>
              <span class="bundle-deals__total-compare-price compare-price">{%- if total_compare_price > total_price %}{{ total_compare_price | money }}{% endif -%}</span>
            </span>
          </p>
          <div class="product-form" data-section="{{ section.id }}">
            <div class="product-form__error-message-wrapper" role="alert" hidden>
              <svg
                aria-hidden="true"
                focusable="false"
                class="icon icon-error"
                viewBox="0 0 13 13"
              >
                <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
                <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
                <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
                <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
              </svg>
              <span class="product-form__error-message"></span>
            </div>
            {%- form 'product',
              product,
              id: product_form_id,
              class: 'form',
              novalidate: 'novalidate',
              data-type: 'add-to-cart-form'
            -%}
              <div class="product-form__variants"></div>
              <input
                type="hidden"
                name="id"
                value=""
                disabled
                class="product-variant-id"
                {% if section.settings.skip_cart %}
                  data-skip-cart="true"
                {% endif %}
              >
              <div class="product-form__buttons">
                <button
                  type="submit"
                  name="add"
                  class="atc-button product-form__submit button button--full-width"
                >
                  <span>
                    {{ section.settings.btn_label }}
                  </span>
                  <div class="loading-overlay__spinner hidden">
                    <svg
                      aria-hidden="true"
                      focusable="false"
                      class="spinner"
                      viewBox="0 0 66 66"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                    </svg>
                  </div>
                </button>
              </div>
            {%- endform -%}
          </div>
        {% else %}
          <button class="button button--full-width" disabled>Select a product for every added block</button>
        {% endif %}
      </div>
    </bundle-deals>
  </div>
</div>
<script>
    if (!customElements.get("bundle-deals")) {
  customElements.define(
    "bundle-deals",
    class BundleDeals extends HTMLElement {
      constructor() {
        super();

        // Cache the cart element
        this.cart =
          document.querySelector("cart-notification") ||
          document.querySelector("cart-drawer");
        this.hideErrors = false
        this.skipCart = false;

        // Initialize event listeners
        this.initEventListeners();
      }
      handleErrorMessage(errorMessage = false) {
        if (this.hideErrors) return;

        this.errorMessageWrapper =
          this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');
        if (!this.errorMessageWrapper) return;
        this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');

        this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);

        if (errorMessage) {
          this.errorMessage.textContent = errorMessage;
        }
      }
      formatNumber(value) {
        // Convert the value to a number and divide by 100
        const number = Number(value) / 100;

        // Check if the number has a decimal part
        return number.toFixed(2);
    }


      changeProductPrices(productID, price, comparePrice) {
        
        const eventProductElem = document.querySelector(`.bundle-deals__product[data-bundle-deal-id="${productID}"]`);
        if (!eventProductElem) return;
        const formattedPrice = Number(this.formatNumber(price));
        const formattedComparePrice = Number(this.formatNumber(comparePrice));
        eventProductElem.querySelector('.bundle-deals__price').textContent = `${formattedPrice} ${this.dataset.currencySymbol}`;
        eventProductElem.querySelector('.bundle-deals__compare-price').textContent = `${formattedComparePrice} ${this.dataset.currencySymbol}`;
        if(formattedComparePrice <= formattedPrice){
            eventProductElem.querySelector('.bundle-deals__compare-price').classList.add('hidden');
        }else{
            eventProductElem.querySelector('.bundle-deals__compare-price').classList.remove('hidden');
        }
        
      }
      calculateFinalPriceByDiscounts(totalPrice, totalComparePrice) {
        const percentageDiscount = Number(this.dataset.percentageLeft);
        const fixedDiscount = Number(this.dataset.fixedDiscount);
        const totalDiscount = totalPrice * (percentageDiscount) - (fixedDiscount/100);
        const finalPrice = totalDiscount.toFixed(2);
        return finalPrice 
      }
      changeFinalPrices(){
        const checkboxes = this.querySelectorAll('.bundle-deals__checkbox:checked');
        let total = 0;
        let totalCompare = 0;
        checkboxes.forEach(checkbox => {
          total += Number(checkbox.dataset.price);
          totalCompare += Number(checkbox.dataset.comparePrice);
        });
        const formattedTotal = Number(this.formatNumber(total));
        const formattedTotalCompare = Number(this.formatNumber(totalCompare));

        const totalElem = this.querySelector('.bundle-deals__total-price');
        const totalCompareElem = this.querySelector('.bundle-deals__total-compare-price');
        totalElem.textContent = `${this.calculateFinalPriceByDiscounts(formattedTotal)} ${this.dataset.currencySymbol}`;
        totalCompareElem.textContent = `${formattedTotalCompare.toFixed(2)} ${this.dataset.currencySymbol}`;
        if(formattedTotalCompare <= formattedTotal){
            totalCompareElem.classList.add('hidden');
        }else{
            totalCompareElem.classList.remove('hidden');
        }
      }


      initEventListeners() {
        // Cache selectors for better performance
        const addToCartBtn = this.querySelector(".product-form__buttons button");


        // Add to cart button click event
        if (addToCartBtn) {
          addToCartBtn.addEventListener("click", async (e) => {
            e.preventDefault();

            const activeProductsCheckboxes = this.querySelectorAll(
              ".bundle-deals__product input.bundle-deals__checkbox:checked"
            );

            if (activeProductsCheckboxes.length === 0) {
              this.handleErrorMessage("Required parameter missing or invalid: items")
              return;
            }

            // Construct payload
            const body = {
              items: Array.from(activeProductsCheckboxes).map((checkbox) => ({
                id: checkbox.dataset.id,
                quantity: 1,
              })),
              sections:'cart-drawer,cart-icon-bubble'
            };


            try {
                e.target.querySelector(".loading-overlay__spinner").classList.remove("hidden");
                e.target.querySelector("span").classList.add("hidden");
              const response = await fetch("/cart/add.js", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
                body: JSON.stringify(body),
              });
               

              if (!response.ok){
                if (response.status === 422) {
                  const data = await response.json();
                  this.handleErrorMessage(data.description);
                  e.target.querySelector(".loading-overlay__spinner").classList.add("hidden");
                  e.target.querySelector("span").classList.remove("hidden");
                  return;
                }
                e.target.querySelector(".loading-overlay__spinner").classList.remove("hidden");
                e.target.querySelector("span").classList.add("hidden");
                throw new Error("Failed to add items to cart.");
              }
              if (this.querySelector(".product-variant-id[name=id]").dataset.skipCart === "true") {
                    this.skipCart = true;
              }
              if (this.skipCart) {
                    window.location = "/checkout";
                    return;
               }
               {% if settings.cart_type == 'page' %}
                window.location = "/cart";
                {% endif %}

              const data = await response.json();

              // Publish cart update event
              publish(PUB_SUB_EVENTS.cartUpdate, {
                source: "product-form",
                cartData: data,
              });
              e.target.querySelector(".loading-overlay__spinner").classList.add("hidden");
              e.target.querySelector("span").classList.remove("hidden");
              setTimeout(() => {
                document.querySelector("cart-drawer.drawer")?.classList.remove("is-empty");
                this.cart.renderContents(data);
              }, 500);
            } catch (error) {
              console.error("Error:", error);
            }
          });
        } else {
          console.warn("Add to Cart Button not found.");
        }

        // Initialize dropdown change events
        this.initDropdownListeners();
        this.initCheckboxListeners();
      }

      initDropdownListeners() {
        // Select all variant dropdowns inside the bundle deals section
        const variantDropdowns = this.querySelectorAll(
          ".bundle-deals__variant-select-container .bundle-deals__variant-select"
        );

        // Add event listener to each dropdown
        variantDropdowns.forEach((dropdown) => {
          dropdown.addEventListener("change", (e) => {
            const selectedOption = e.target.options[e.target.selectedIndex];
            const newId = selectedOption.value; // Get the selected option value
            const newPrice = selectedOption.dataset.price; // Get the selected option price
            const newComparePrice = selectedOption.dataset.comparePrice; // Get the selected option compare price
            const container = e.target.closest(".bundle-deals__product"); // Closest product container
            const checkbox = container.querySelector(".bundle-deals__checkbox"); // The checkbox inside the container

            if (checkbox) {
              // Update data-id attribute of the checkbox
              checkbox.dataset.id = newId;
              checkbox.dataset.price = newPrice;
              checkbox.dataset.comparePrice = newComparePrice;
              if(this.dataset.updatePrices === "true"){
                this.changeProductPrices(checkbox.dataset.bundleDealId, newPrice, newComparePrice);
                this.changeFinalPrices();
              }
            }
          });
        });
      }
      initCheckboxListeners() {
        // Select all checkboxes inside the bundle deals section
        const checkboxes = this.querySelectorAll(".bundle-deals__checkbox");

        // Add event listener to each checkbox
        checkboxes.forEach((checkbox,i) => {
          checkbox.addEventListener("change", (e) => {
            if (this.dataset.updatePrices === "true") {
              this.changeFinalPrices();
                
            }
            e.target.closest(".bundle-deals__product").classList.toggle("bundle-deals__product--deselected");

            const clickedProductMedia = this.querySelectorAll(".bundle-deals__media-item")[i];
            clickedProductMedia?.querySelector("a").classList.toggle("bundle-deals__media-item--disabled");
            
          });
        });
      }
    }
  );
}


</script>


{% schema %}
{
  "name": "Bundle deals",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "default": "Bundle deals",
      "label": "Heading"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "richtext",
      "id": "text",
      "label": "Text"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "Accent 1"
        },
        {
          "value": "accent-2",
          "label": "Accent 2"
        },
        {
          "value": "background-1",
          "label": "Background 1"
        },
        {
          "value": "background-2",
          "label": "Background 2"
        },
        {
          "value": "inverse",
          "label": "Inverse"
        },
        {
          "value": "custom",
          "label": "Custom"
        }
      ],
      "default": "background-1",
      "label": "Color scheme",
      "info": "Custom color scheme is edited at the bottom of section settings."
    },
    {
      "type": "header",
      "content": "Bundles"
    },
    {
      "type": "select",
      "id": "layout",
      "options": [
        {
          "value": "",
          "label": "Vertical"
        },
        {
          "value": "horizontal-images-left",
          "label": "Horizontal - Images left"
        },
        {
          "value": "horizontal-images-right",
          "label": "Horizontal - Images right"
        }
      ],
      "default": "horizontal-images-left",
      "label": "Desktop layout"
    },
    {
      "type": "checkbox",
      "id": "enable_price_changes",
      "label": "Enable dynamic price changes",
      "info": "Enables live changes to item and total prices after variant/checkbox change. CAUTION: Due to the way Liquid works, after a change, new price will NOT work with currency converters.",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "skip_cart",
      "label": "Skip cart",
      "default": false,
      "info": "Your customers will be sent directly to checkout after click the Add to Cart button."
    },
    {
      "type": "text",
      "id": "total_price_label",
      "label": "Total price label",
      "default": "Total Price:"
    },
    {
      "type": "text",
      "id": "btn_label",
      "label": "Add to cart button label",
      "default": "Add selected to cart"
    },
    {
      "type": "header",
      "content": "Discounts"
    },
    {
      "type": "text",
      "id": "percentage_discount",
      "label": "Percentage discount",
      "default": "0",
      "info": "Percentae to be discounted from the total price, WITHOUT the % symbol."
    },
    {
      "type": "text",
      "id": "fixed_amount_discount",
      "label": "Fixed amount discount",
      "default": "0",
      "info": "Fixed amount of money to be discounted from the total price, WITHOUT the currency symbol."
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
    {
      "type": "header",
      "content": "Custom color scheme",
      "info": "Applied if Color scheme setting is set to Custom."
    },
    {
      "type": "color",
      "id": "custom_colors_background",
      "default": "#FFFFFF",
      "label": "Background color"
    },
    {
      "type": "color_background",
      "id": "custom_gradient_background",
      "label": "Gradient background",
      "info": "If added, replaces Background color when applicable."
    },
    {
      "type": "color",
      "id": "custom_colors_text",
      "default": "#2E2A39",
      "label": "Text"
    },
    {
      "type": "color",
      "id": "custom_colors_accent",
      "default": "#dd1d1d",
      "label": "Accents"
    },
    {
      "type": "color",
      "id": "custom_colors_solid_button_background",
      "default": "#dd1d1d",
      "label": "Solid button background"
    },
    {
      "type": "color",
      "id": "custom_colors_solid_button_text",
      "default": "#ffffff",
      "label": "Solid button label"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "limit": 5,
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        },
        {
          "type": "text",
          "id": "percentage_discount",
          "label": "Percentage discount",
          "default": "0",
          "info": "Percentae to be discounted from the total price, WITHOUT the % symbol."
        },
        {
          "type": "text",
          "id": "fixed_amount_discount",
          "label": "Fixed amount discount",
          "default": "0",
          "info": "Fixed amount of money to be discounted from the total price, WITHOUT the currency symbol."
        },
        {
          "type": "checkbox",
          "id": "required",
          "label": "Checkbox locked",
          "info": "When enabled, prevents this product from being removed from the selection."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Bundle deals",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
